version: "3.7"
services:
  backend:
    image: micadoproject/micado_backend:18.19.1
    stdin_open: true
    tty: true
    volumes:
      - type: volume
        source: backend
        target: /code
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - type: volume
        source: shared_images
        target: /images
    tmpfs: /tmp/translations
    ports:
      - "3000:3000"
    #     - "8080:8080"
    #    command: /bin/sh -c "cd backend && npm start"
    command: /bin/sh -c "bash"
    env_file:
      - .env
      - prod.env
    environment:
      - MICADO_GIT_URL=${MICADO_GIT_URL}
      - ROCKETCHAT_HOSTNAME=${ROCKETCHAT_HOSTNAME}
      - ROCKETCHAT_ADMIN=${ROCKETCHAT_ADMIN}
      - ROCKETCHAT_ADMIN_PWD=${ROCKETCHAT_ADMIN_PWD}
      # don't use the /tmp/translations from tmpfs because it gives a permission error (have to fix this).
      - MICADO_TRANSLATIONS_DIR=/tmp/translations-repo
      - POSTGRES_DB=${POSTGRES_DB}
      - MICADO_DB_PWD=${MICADO_DB_PWD}
      - MICADO_DB_USER=${MICADO_DB_USER}
      - MICADO_DB_SCHEMA=${MICADO_DB_SCHEMA}
      - WSO2_IDENTITY_ADMIN_PWD=${WSO2_IDENTITY_ADMIN_PWD}
      - WSO2_IDENTITY_ADMIN_USER=${WSO2_IDENTITY_ADMIN_USER}
      - MICADO_ENV=${MICADO_ENV}
      - IDENTITY_HOSTNAME=${IDENTITY_HOSTNAME}
      - WEBLATE_EMAIL_HOST=${WEBLATE_EMAIL_HOST}
      - WEBLATE_EMAIL_HOST_USER=${WEBLATE_EMAIL_HOST_USER}
      - WEBLATE_EMAIL_HOST_SSL=${WEBLATE_EMAIL_HOST_SSL}
      - WEBLATE_EMAIL_HOST_PASSWORD=${WEBLATE_EMAIL_HOST_PASSWORD}
      - ANALYTIC_HOSTNAME=${ANALYTIC_HOSTNAME}
      - COUNTLY_MIGRANTS_APP_ID=${COUNTLY_MIGRANTS_APP_ID}
      - COUNTLY_MIGRANTS_API_KEY=${COUNTLY_MIGRANTS_API_KEY}
      - COUNTLY_ADMIN=${COUNTLY_ADMIN}
      - COUNTLY_ADMIN_PWD=${COUNTLY_ADMIN_PWD}
      - ALGORITHM=${ALGORITHM}
      - SALT=${SALT}
      - KEY_LENGTH=${KEY_LENGTH}
      - BUFFER_0=${BUFFER_0}
      - BUFFER_1=${BUFFER_1}
      - ALGORITHM_PASSWORD=${ALGORITHM_PASSWORD}
    networks:
      - micado_net

  micado_db:
    image: groonga/pgroonga:2.3.4-alpine-11-slim
    env_file:
      - .env
      - prod.env
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
      - type: volume
        source: postgres_init
        target: /docker-entrypoint-initdb.d
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    networks:
      - micado_net

  git:
    image: gitea/gitea:1.12.2
    networks:
      - micado_net
    ports:
      - "3001:3000"
      - "222:22"
    env_file:
      - prod.env
    environment:
      APP_NAME: "micado git"
      RUN_MODE: prod
      INSTALL_LOCK: "true"
      DB_TYPE: postgres
      DB_HOST: micado_db:5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${GITEA_DB_USER}
      DB_PASSWD: ${GITEA_DB_PWD}
      GIT_HOSTNAME: ${GIT_HOSTNAME}
      SECRET_KEY: ${GIT_SECRET_KEY}
      DISABLE_REGISTRATION: "true"
    volumes:
      - git_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
  #    command: "sh -c '/bin/s6-svscan /etc/s6 && /app/gitea/gitea admin create-user --name=gitea --password=gitea --email=test@xx.com --admin --must-change-password=false'"

  testnode:
    image: micadoproject/backend
    ports:
      - "3001:3000"
    networks:
      - micado_net

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/db_data
      o: bind
  postgres_init:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/db_init
      o: bind
  backend:
    driver: local
    driver_opts:
      type: none
      device: $PWD/application
      o: bind
  git_data:
    driver_opts:
      type: none
      device: $PWD/git_data
      o: bind
  shared_images:
    driver: local
    driver_opts:
      type: none
      device: $PWD/shared_images
      o: bind

networks:
  micado_net:
    #    driver: bridge
    external: true
